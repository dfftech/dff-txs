{
    "PrintConsole": {
        "prefix": "dtlog",
        "body": [ "console.log('$1 => ', $1);" ],
        "description": "console log"
    },
    "ApiPostCall": {
        "prefix": "dtapc",
        "body": [
            "const apiPost${1/(.*)/${1:/capitalize}/} = async (data: any) => {",
            "\tconst url = MsUrl.${2} + \"/${3}\";",
            "\tconst body = { ...data };",
            "\tconst res = await AppHttp.Post(url, body);",
            "\treturn res;",
            "};"
        ],
        "description": "API post call"
    },
    "ApiGetCall": {
        "prefix": "dtagc",
        "body": [
            "const apiGet${1/(.*)/${1:/capitalize}/} = async (data: any) => {",
            "\tconst url = MsUrl.${2} + \"/${3}\";",
            "\tconst params = { ...data };",
            "\tconst res = await AppHttp.Get(url, params);",
            "\treturn res;",
            "};"
        ],
        "description": "API Get call"
    },
    "ApiDeleteCall": {
        "prefix": "dtadc",
        "body": [
            "const apiDelete${1/(.*)/${1:/capitalize}/} = async (data: any) => {",
            "\tconst url = MsUrl.${2} + \"/${3}\";",
            "\tconst params = { ...data };",
            "\tconst res = await AppHttp.Delete(url, params);",
            "\treturn res;",
            "};"
        ],
        "description": "API Delete call"
    },
    "onAsyncFunction": {
        "prefix": "dtoaf",
        "body": [
            "export const is${1/(.*)/${1:/capitalize}/}Loading = signal<boolean>(false);",
            "export const on${1/(.*)/${1:/capitalize}/} = async (data: any) => {",
            "\ttry {",
            "\t\tis${1/(.*)/${1:/capitalize}/}Loading.value = true;",
            "\t\tconsole.log(\"on${1/(.*)/${1:/capitalize}/} data :: \", data);",
            "\t\tconst url = MsUrl. + ApiUrl. ;",
            "\t\tconst params = { ...data };",
            "\t\tconst res = await AppHttp.Post(url, params);",
            "\t\tconsole.log(\"on${1/(.*)/${1:/capitalize}/} resp :: \", resp);",
            "\t\treturn resp;",
            "\t} catch (error: any) {",
            "\t\tconsole.error(\"on${1/(.*)/${1:/capitalize}/} error :: \", error);",
            "\t\tconst messsage = error?.error?.message || ConstMessages.WENT_WRONG;",
            "\t\tShowToast(messsage, \"error\");",
            "\t} finally {",
            "\t\tis${1/(.*)/${1:/capitalize}/}Loading.value = true;",
            "\t}",
            "};"
        ],
        "description": "Async function with loader, toast, and logging"
    }
}