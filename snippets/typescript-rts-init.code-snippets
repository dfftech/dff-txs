{
    "Type and Init Values for Entity": {
        "prefix": "dtxinittyp",
        "body": [
            "export type ${1/(.*)/${1:/capitalize}/}Type = {",
            "  id: string;",
            "  nameLang: Record<string, string>;",
            "  active: boolean;",
            "  updatedAt: string;",
            "};",
            "",
            "export const ${1}InitValues: ${1/(.*)/${1:/capitalize}/}Type = {",
            "  id: \"\",",
            "  nameLang: {},",
            "  active: true,",
            "  updatedAt: new Date().toISOString(),",
            "};",
            ""
        ],
        "description": "Generates a type and initial values for an entity"
    },
    "Validation Schema for Entity": {
        "prefix": "dtxinitvalid",
        "body": [
            "import { ConstKeys } from \"dff-util\";",
            "",
            "export const ${1}Validation = {",
            "  active: {",
            "    required: {",
            "      value: true,",
            "      message: ConstKeys.REQUIRED,",
            "    },",
            "  },",
            "};",
            ""
        ],
        "description": "Validation rules object for an entity"
    },
    "Entity Signals and Calls": {
        "prefix": "dtxinitsrv",
        "body": [
            "import { signal } from \"@preact/signals\";",
            "import { ConstKeys } from \"dff-util\";",
            "",
            "import { ShowToast } from \"@/utils/services/app.event\";",
            "import AppHttp from \"@/utils/services/app.http\";",
            "import { t } from \"@/i18n\";",
            "",
            "export const ${1}IsPopupOpen = signal<boolean>(false);",
            "export const ${1}IsEditMode = signal<boolean>(false);",
            "export const ${1}SelectedId = signal<string | undefined>();",
            "",
            "export const editModeUpdate = (id: string | undefined, mode?: \"edit\" | \"add\") => {",
            "  if (mode === \"add\") {",
            "    ${1}SelectedId.value = undefined;",
            "    ${1}IsEditMode.value = true;",
            "    ${1}IsPopupOpen.value = true;",
            "  } else {",
            "    if (id) {",
            "      ${1}SelectedId.value = id;",
            "      ${1}IsEditMode.value = mode === \"edit\" ? true : false;",
            "      ${1}IsPopupOpen.value = true;",
            "    } else {",
            "      ${1}SelectedId.value = undefined;",
            "      ${1}IsEditMode.value = false;",
            "      ${1}IsPopupOpen.value = false;",
            "    }",
            "  }",
            "};",
            "",
            "export const ${1}ListIsLoading = signal<boolean>(false);",
            "export const ${1}ListCall = async (params: any) => {",
            "  try {",
            "    ${1}ListIsLoading.value = true;",
            "    const url = AppHttp.MsUrl.main + '/';",
            "    const resp = await AppHttp.Post(url, params);",
            "    //const resp = { data: GridData, total: GridData.length };",
            "    return resp;",
            "  } catch (error: any) {",
            "    const message = error?.error?.message || ConstKeys.WENT_WRONG;",
            "    ShowToast(t(message), \"warning\");",
            "  } finally {",
            "    ${1}ListIsLoading.value = false;",
            "  }",
            "};",
            "",
            "export const ${1}EntityIsLoading = signal<boolean>(false);",
            "export const ${1}EntityCall = async (params: any) => {",
            "  try {",
            "    ${1}EntityIsLoading.value = true;",
            "    const url = AppHttp.MsUrl.main + '/';",
            "    const resp = await AppHttp.Post(url, params);",
            "    return resp;",
            "  } catch (error: any) {",
            "    const message = error?.error?.message || ConstKeys.WENT_WRONG;",
            "    ShowToast(t(message), \"warning\");",
            "  } finally {",
            "    ${1}EntityIsLoading.value = false;",
            "  }",
            "};",
            "",
            "export const ${1}SaveIsLoading = signal<boolean>(false);",
            "export const ${1}SaveCall = async (params: any) => {",
            "  try {",
            "    ${1}SaveIsLoading.value = true;",
            "    const url = AppHttp.MsUrl.main + '/';",
            "    const resp = await AppHttp.Post(url, params);",
            "    return resp;",
            "  } catch (error: any) {",
            "    const message = error?.error?.message || ConstKeys.WENT_WRONG;",
            "    ShowToast(t(message), \"warning\");",
            "  } finally {",
            "    ${1}SaveIsLoading.value = false;",
            "  }",
            "};",
            "",
            "export const ${1}StatusIsLoading = signal<boolean>(false);",
            "export const ${1}StatusCall = async (params: Record<string, string>) => {",
            "  try {",
            "    ${1}StatusIsLoading.value = true;",
            "    const url = AppHttp.MsUrl.main + '/';",
            "    const resp = await AppHttp.Post(url, params);",
            "    return resp;",
            "  } catch (error: any) {",
            "    const message = error?.error?.message || ConstKeys.WENT_WRONG;",
            "    ShowToast(t(message), \"warning\");",
            "  } finally {",
            "    ${1}StatusIsLoading.value = false;",
            "  }",
            "};",
            ""
        ],
        "description": "Signal state and API methods for an entity"
    },
    "AG Grid Init": {
        "prefix": "dtxrinitgrid",
        "body": [
            "import { IDatasource, IGetRowsParams, ColDef } from \"ag-grid-community\";",
            "import { GridOptions } from \"ag-grid-community\";",
            "import { TFunction } from \"i18next\";",
            "",
            "import { ${1}ListCall } from \"./service\";",
            "",
            "import ActionCellRenderer from \"@/grid/action-cell\";",
            "import { SkeletonTable } from \"@/skeleton/skeleton-table\";",
            "import NoRowsComponent from \"@/components/no-rows\";",
            "import { ShowToast } from \"@/utils/services/app.event\";",
            "import { t, trans } from \"@/i18n\";",
            "",
            "export const gridOptions: GridOptions = {",
            "  rowModelType: \"infinite\",",
            "  infiniteInitialRowCount: 10,",
            "  pagination: true,",
            "  paginationPageSize: 10,",
            "  loadingCellRenderer: SkeletonTable,",
            "  paginationPageSizeSelector: false,",
            "  noRowsOverlayComponent: NoRowsComponent,",
            "  defaultColDef: {",
            "    flex: 1,",
            "    sortable: true,",
            "    filter: false,",
            "    resizable: true,",
            "    minWidth: 100,",
            "  },",
            "};",
            "",
            "export const columnDefs = (t: TFunction, onAction: Function): ColDef<any>[] => [",
            "  {",
            "    field: \"id\",",
            "    headerName: t(\"id\"),",
            "    maxWidth: 100,",
            "  },",
            "  {",
            "    field: \"nameLang\",",
            "    headerName: t(\"name\"),",
            "    flex: 1,",
            "    valueGetter: (params) => trans(params.data?.nameLang),",
            "  },",
            "  {",
            "    headerName: t(\"actions\"),",
            "    field: \"actions\",",
            "    maxWidth: 120,",
            "    cellRenderer: ActionCellRenderer,",
            "    cellRendererParams: { onAction },",
            "    sortable: false,",
            "    filter: false,",
            "  },",
            "];",
            "",
            "export const getDataSource = (searchTerm: string): IDatasource => ({",
            "  getRows: async (params: IGetRowsParams) => {",
            "    const query = {",
            "      orderby: \"createdAt\",",
            "      skip: params.startRow,",
            "      limit: 100,",
            "      searchTerm: searchTerm,",
            "      query: {",
            "        name: searchTerm,",
            "      },",
            "    };",
            "",
            "    try {",
            "      const respData: any = await ${1}ListCall(query);",
            "      const lastRow = respData.total || -1;",
            "      params.successCallback(respData.data, lastRow);",
            "    } catch (error) {",
            "      ShowToast(t((error as any)?.message), \"warning\");",
            "      params.failCallback();",
            "    }",
            "  },",
            "});",
            ""
        ],
        "description": "AG Grid configuration with columnDefs and getDataSource for an entity"
    }
}