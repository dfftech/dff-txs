{
    "PrintConsole": {
        "prefix": "dxlog",
        "body": [
            "console.log('$1 => ', $1);"
        ],
        "description": "console log"
    },
    "react page init": {
        "prefix": "dxpage",
        "body": [
            "import { useEffect } from \"react\";",
            "import { PageLayout } from \"@/layouts/page-layout\";",
            "import { useSignals } from \"@preact/signals-react/runtime\";",
            "import { useTranslation } from \"react-i18next\";",
            "export default function ${1/(.*)/${1:/capitalize}/}() {",
            "  useSignals();",
            "  const { t } = useTranslation();",
            "",
            "  useEffect(() => {",
            "  }, []);",
            "",
            "  return (",
            "    <PageLayout>",
            "    </PageLayout>",
            "  );",
            "}",
            ""
        ],
        "description": "react page init"
    },
    "React hook forms initial": {
        "prefix": "dxrhf",
        "body": [
            "  const ${1} = useSignal<${1/(.*)/${1:/capitalize}/}Type>({ ...${1}InitValues });",
            "  const ${1}Rule = ${1}Validation;",
            "  const {",
            "    handleSubmit,",
            "    control,",
            "    reset,",
            "    formState: { errors },",
            "  } = useForm<${1/(.*)/${1:/capitalize}/}Type>({});",
            "",
            "  const onReset${1/(.*)/${1:/capitalize}/} = () => {",
            "    reset({ ...${1}.value });",
            "  };",
            "",
            "  const onSubmit${1/(.*)/${1:/capitalize}/} = async (data: ${1/(.*)/${1:/capitalize}/}Type) => {",
            "    ${1}.value = data;",
            "    const resp = await ${1}SaveCall(${1}.value);",
            "    if (resp) {",
            "      ShowToast(t(ConstKeys.SAVED_SUCCESSFULLY), \"success\");",
            "    }",
            "  };",
            "",
            "  const onCancel${1/(.*)/${1:/capitalize}/} = () => {",
            "    onReset${1/(.*)/${1:/capitalize}/}();",
            "  };",
            "",
            "  const onReload${1/(.*)/${1:/capitalize}/} = async () => {",
            "  };",
            "",
            "  const submitProps = useMemo(",
            "    () => ({",
            "      isLoading: ${1}SaveIsLoading.value,",
            "      label: t(\"submit\"),",
            "      name: \"SendHorizontal\" as const,",
            "      onPress: handleSubmit(onSubmit${1/(.*)/${1:/capitalize}/}),",
            "    }),",
            "    [t, ${1}SaveIsLoading.value],",
            "  );",
            "",
            "  const cancelProps = useMemo(",
            "    () => ({",
            "      action: \"secondary\" as const,",
            "      label: t(\"cancel\"),",
            "      name: \"CircleX\" as const,",
            "      onPress: onCancel${1/(.*)/${1:/capitalize}/},",
            "    }),",
            "    [t],",
            "  );",
            "",
        ],
        "description": "react hook forms call"
    },
    "Button Props useMemo": {
        "prefix": "dxtbtn",
        "body": [
            "const ${1}ActionProps = useMemo(",
            "  () => ({",
            "    label: t(\"${1}\"),",
            "    name: \"File\" as const,",
            "    onPress: ${1}Action${2/(.*)/${2:/capitalize}/}),",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for button props"
    },
    "Submit Props useMemo": {
        "prefix": "dxtsbm",
        "body": [
            "const submitProps = useMemo(",
            "  () => ({",
            "    isLoading: ${1}SaveIsLoading.value,",
            "    label: t(\"submit\"),",
            "    name: \"SendHorizontal\" as const,",
            "    onPress: handleSubmit(onSubmit${1/(.*)/${1:/capitalize}/}),",
            "  }),",
            "  [t, ${1}SaveIsLoading.value],",
            ");"
        ],
        "description": "useMemo hook for submit button props"
    },
    "Cancel Props useMemo": {
        "prefix": "dxtcal",
        "body": [
            "const cancelProps = useMemo(",
            "  () => ({",
            "    label: t(\"cancel\"),",
            "    name: \"CircleX\" as const,",
            "    onPress: onCancel${1/(.*)/${1:/capitalize}/},",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for cancel button props"
    },
    "Markdown Props useMemo": {
        "prefix": "dxtlmd",
        "body": [
            "const ${1}MdProps = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2}Rule.${1}",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for TypeMarkdown/Field component props"
    },
    "Search Props useMemo": {
        "prefix": "dxtsrc",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    disabled: false,",
            "    label: t(\"${1}\"),",
            "    name: \"${2}\",",
            "    value: \"\",",
            "    onChange: (value: string) => {",
            "      setSearchTerm(value);",
            "    },",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for searchProps with onChange handler"
    },
    "Generic Input Props useMemo": {
        "prefix": "dxtfip",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2}Rule.${1}",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for Input props"
    },
    "OTP Props useMemo": {
        "prefix": "dxtotp",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2}Rule.${1},",
            "    length: 6",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for OTP field props"
    },
    "Date Props useMemo": {
        "prefix": "dxtdat",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    error: errors[\"${1}\"],",
            "    isDateTimeEnabled: true,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2}Rule.${1}",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for date field"
    },
    "Checkbox Props useMemo": {
        "prefix": "dxtchb",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\"",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for simple checkbox field"
    },
    "Switch Props useMemo": {
        "prefix": "dxtswt",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\"",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for simple Switch field"
    },
    "List Props useMemo": {
        "prefix": "dxtlst",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    options: ${1}Options.value,",
            "    rules: ${2}Rule.${1},",
            "    disabled: false,",
            "    selectionMode: \"multiple\" as const",
            "  }),",
            "  [t, errors.${1}], ${1}Options.value],",
            ");"
        ],
        "description": "useMemo hook for select or multi-select List"
    },
    "Lang Props useMemo": {
        "prefix": "dxtlng",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2}Rule.${1},",
            "    type: \"text\" as const",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for language field"
    },
    "Country Props useMemo": {
        "prefix": "dxtsel",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    multiSelect: false,",
            "    name: \"${1}\",",
            "    options: ${1}Options.value,",
            "    rules: ${2}Rule.${1}",
            "  }),",
            "  [t, errors.${1}, ${1}Options.value],",
            ");"
        ],
        "description": "useMemo hook for select"
    },
    "Time Props useMemo": {
        "prefix": "dxttim",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2}Rule.${1},",
            "    type: 12 as const",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for time field"
    },
    "Markdown Field Edit Props": {
        "prefix": "dxtmdx",
        "body": [
            "const ${1}MdxProps = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: ${2:testRule}.${1},",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "mark down edit "
    },
    "Markdown Viewer Props useMemo": {
        "prefix": "dxtmdvprops",
        "body": [
            "const ${1}MdvProps = useMemo(",
            "  () => ({",
            "    markdownText: ${2:test}.value.${1},",
            "    className: \"w-full h-[250px]\",",
            "  }),",
            "  [${2:test}.value.${1}],",
            ");"
        ],
        "description": "markdown viewer props"
    }
}