{
    "Entity View Page": {
        "prefix": "dxviewpage",
        "body": [
            "import { useSignal } from \"@preact/signals-react\";",
            "import { useSignals } from \"@preact/signals-react/runtime\";",
            "import React, { useMemo } from \"react\";",
            "import { useTranslation } from \"react-i18next\";",
            "",
            "import {",
            "  editModeUpdate,",
            "  ${1}SelectedId,",
            "  ${1}EntityCall,",
            "} from \"./common/service\";",
            "import { ${1/(.*)/${1:/capitalize}/}Type, ${1}InitValues } from \"./common/types\";",
            "",
            "import TypeButton from \"@/types/type.button\";",
            "import { ContentLayout } from \"@/layouts/content-layout\";",
            "import { ArticleLayout } from \"@/layouts/article-layout\";",
            "import { ScreenAccess } from \"@/utils/services/app.event\";",
            "",
            "export default function ${1/(.*)/${1:/capitalize}/}View() {",
            "  useSignals();",
            "  const { t } = useTranslation();",
            "  const ${1} = useSignal<${1/(.*)/${1:/capitalize}/}Type>({ ...${1}InitValues });",
            "",
            "  React.useEffect(() => {",
            "    onReload${1/(.*)/${1:/capitalize}/}();",
            "  }, []);",
            "",
            "  const onCancel${1/(.*)/${1:/capitalize}/} = () => {",
            "    editModeUpdate(undefined);",
            "  };",
            "",
            "  const editAction${1/(.*)/${1:/capitalize}/} = () => {",
            "    editModeUpdate(${1}SelectedId.value, \"edit\");",
            "  };",
            "",
            "  const onReload${1/(.*)/${1:/capitalize}/} = async () => {",
            "    if (${1}SelectedId.value) {",
            "      const params = { id: ${1}SelectedId.value };",
            "      const resp = await ${1}EntityCall(params);",
            "",
            "      if (resp) {",
            "        ${1}.value = resp;",
            "      }",
            "    }",
            "  };",
            "",
            "  const editActionProps = useMemo(",
            "    () => ({",
            "      action: \"primary\" as const,",
            "      label: t(\"edit\"),",
            "      name: \"Pencil\" as const,",
            "      onPress: editAction${1/(.*)/${1:/capitalize}/},",
            "      disabled: !ScreenAccess.value.update,",
            "    }),",
            "    [t],",
            "  );",
            "",
            "  const cancelProps = useMemo(",
            "    () => ({",
            "      action: \"secondary\" as const,",
            "      label: t(\"cancel\"),",
            "      name: \"CircleX\" as const,",
            "      onPress: onCancel${1/(.*)/${1:/capitalize}/},",
            "    }),",
            "    [t],",
            "  );",
            "",
            "  return (",
            "    <section className=\"w-full\">",
            "      <ArticleLayout>",
            "        <div className=\"flex flex-row justify-between gap-4\">",
            "          <h3>${1/(.*)/${1:/capitalize}/} View</h3>",
            "          <div className=\"flex flex-row gap-4\">",
            "            <TypeButton {...cancelProps} />",
            "            {ScreenAccess.value.update && <TypeButton {...editActionProps} />}",
            "          </div>",
            "        </div>",
            "      </ArticleLayout>",
            "      <ContentLayout>",
            "        <div className=\"flex flex-col gap-4 w-full\">",
            "          <div className=\"flex flex-col gap-4\">",
            "            {${1}.value.active ? t(\"active\") : t(\"inActive\")}",
            "          </div>",
            "        </div>",
            "      </ContentLayout>",
            "    </section>",
            "  );",
            "}",
            ""
        ],
        "description": "Signal-based View Page with reload/edit/cancel logic"
    },
    "Entity Form Page": {
        "prefix": "dxformpage",
        "body": [
            "import { useForm } from \"react-hook-form\";",
            "import { useSignal } from \"@preact/signals-react\";",
            "import { useSignals } from \"@preact/signals-react/runtime\";",
            "import React, { useMemo } from \"react\";",
            "import { useTranslation } from \"react-i18next\";",
            "import { ConstKeys } from \"dff-util\";",
            "",
            "import { ${1}InitValues, ${1/(.*)/${1:/capitalize}/}Type } from \"./common/types\";",
            "import { ${1}Validation } from \"./common/validation\";",
            "import {",
            "  editModeUpdate,",
            "  ${1}SelectedId,",
            "  ${1}SaveIsLoading,",
            "  ${1}EntityCall,",
            "  ${1}SaveCall,",
            "} from \"./common/service\";",
            "",
            "import { ArticleLayout } from \"@/layouts/article-layout\";",
            "import TypeButton from \"@/types/type.button\";",
            "import { ContentLayout } from \"@/layouts/content-layout\";",
            "import TypeSwitch from \"@/types/type.switch\";",
            "import { ShowToast } from \"@/utils/services/app.event\";",
            "",
            "export default function ${1/(.*)/${1:/capitalize}/}Form() {",
            "  useSignals();",
            "  const { t } = useTranslation();",
            "  const ${1} = useSignal<${1/(.*)/${1:/capitalize}/}Type>({ ...${1}InitValues });",
            "  const ${1}Rule = ${1}Validation;",
            "",
            "  React.useEffect(() => {",
            "    onReload${1/(.*)/${1:/capitalize}/}();",
            "  }, []);",
            "",
            "  const {",
            "    handleSubmit,",
            "    control,",
            "    reset,",
            "    formState: { errors },",
            "  } = useForm<${1/(.*)/${1:/capitalize}/}Type>({});",
            "",
            "  const onReset${1/(.*)/${1:/capitalize}/} = () => {",
            "    reset({ ...${1}.value });",
            "  };",
            "",
            "  const onSubmit${1/(.*)/${1:/capitalize}/} = async (data: ${1/(.*)/${1:/capitalize}/}Type) => {",
            "    ${1}.value = data;",
            "    const resp = await ${1}SaveCall(${1}.value);",
            "    if (resp) {",
            "      ShowToast(t(ConstKeys.SAVED_SUCCESSFULLY), \"success\");",
            "      editModeUpdate(undefined);",
            "    }",
            "  };",
            "",
            "  const onCancel${1/(.*)/${1:/capitalize}/} = () => {",
            "    onReset${1/(.*)/${1:/capitalize}/}();",
            "    editModeUpdate(undefined);",
            "  };",
            "",
            "  const onReload${1/(.*)/${1:/capitalize}/} = async () => {",
            "    if (${1}SelectedId.value) {",
            "      const params = { id: ${1}SelectedId.value };",
            "      const resp = await ${1}EntityCall(params);",
            "      if (resp) {",
            "        ${1}.value = resp;",
            "        onReset${1/(.*)/${1:/capitalize}/}();",
            "      }",
            "    }",
            "  };",
            "",
            "  const submitProps = useMemo(",
            "    () => ({",
            "      isLoading: ${1}SaveIsLoading.value,",
            "      label: t(\"submit\"),",
            "      name: \"SendHorizontal\" as const,",
            "      onPress: handleSubmit(onSubmit${1/(.*)/${1:/capitalize}/}),",
            "    }),",
            "    [t, ${1}SaveIsLoading.value],",
            "  );",
            "",
            "  const cancelProps = useMemo(",
            "    () => ({",
            "      action: \"secondary\" as const,",
            "      label: t(\"cancel\"),",
            "      name: \"CircleX\" as const,",
            "      onPress: onCancel${1/(.*)/${1:/capitalize}/},",
            "    }),",
            "    [t],",
            "  );",
            "",
            "  const activeProps = useMemo(",
            "    () => ({",
            "      control,",
            "      label: t(\"active\"),",
            "      name: \"active\",",
            "      disabled: false,",
            "    }),",
            "    [t],",
            "  );",
            "",
            "  return (",
            "    <section className=\"w-full\">",
            "      <ArticleLayout>",
            "        <div className=\"flex flex-row justify-between gap-4\">",
            "          <h3>${1/(.*)/${1:/capitalize}/} Form</h3>",
            "          <div className=\"flex flex-row gap-4\">",
            "            <TypeButton {...cancelProps} />",
            "            <TypeButton {...submitProps} />",
            "          </div>",
            "        </div>",
            "      </ArticleLayout>",
            "      <ContentLayout>",
            "        <form>",
            "          <div className=\"flex flex-col gap-4 w-full\">",
            "            <div className=\"flex flex-col gap-4\">",
            "              <TypeSwitch {...activeProps} />",
            "            </div>",
            "          </div>",
            "        </form>",
            "      </ContentLayout>",
            "    </section>",
            "  );",
            "}",
            ""
        ],
        "description": "Form page for entity using react-hook-form and Preact signals"
    },
    "Entity List Page": {
        "prefix": "dxlistpage",
        "body": [
            "import { useTranslation } from \"react-i18next\";",
            "import { AgGridReact } from \"ag-grid-react\";",
            "import { useRef, useState, useMemo, useEffect } from \"react\";",
            "import { useSignals } from \"@preact/signals-react/runtime\";",
            "",
            "import { columnDefs, getDataSource, gridOptions } from \"./common/grid\";",
            "import {",
            "  editModeUpdate,",
            "  ${1}IsPopupOpen,",
            "  ${1}SelectedId,",
            "  ${1}IsEditMode,",
            "  ${1}StatusCall,",
            "} from \"./common/service\";",
            "",
            "import { ArticleLayout } from \"@/layouts/article-layout\";",
            "import { FloatLayout } from \"@/layouts/float-layout\";",
            "import TypeButton from \"@/types/type.button\";",
            "import { ScreenAccess, ThemeMode } from \"@/utils/services/app.event\";",
            "import TypeSearch from \"@/types/type.search\";",
            "import { darkGridTheme, lightGridTheme } from \"@/styles/ag.theme\";",
            "import { GridLayout } from \"@/layouts/grid-layout\";",
            "",
            "export function ${1/(.*)/${1:/capitalize}/}List() {",
            "  useSignals();",
            "  const { t } = useTranslation();",
            "  const gridRef = useRef<AgGridReact>(null);",
            "  const [searchTerm, setSearchTerm] = useState<string>(\"\");",
            "  const dataSource = useMemo(() => getDataSource(searchTerm), [searchTerm]);",
            "",
            "  useEffect(() => {",
            "    editModeUpdate(undefined, \"edit\");",
            "  }, []);",
            "",
            "  const handleAction = async (data: any, action: \"edit\" | \"status\") => {",
            "    if (action === \"edit\") {",
            "      ${1}SelectedId.value = data.id;",
            "      ${1}IsEditMode.value = false;",
            "      ${1}IsPopupOpen.value = true;",
            "    } else if (action === \"status\") {",
            "      const resp = await ${1}StatusCall({",
            "        id: data.id,",
            "        active: data.active,",
            "      });",
            "      if (resp) {",
            "        handleReload();",
            "      }",
            "    }",
            "  };",
            "",
            "  const handleReload = () => {",
            "    if (gridRef.current && gridRef.current.api) {",
            "      gridRef.current.api.purgeInfiniteCache();",
            "    }",
            "  };",
            "",
            "  const onAdd = () => {",
            "    editModeUpdate(undefined, \"add\");",
            "  };",
            "",
            "  return (",
            "    <>",
            "      <ArticleLayout>",
            "        <aside className=\"flex justify-between gap-2\">",
            "          <div>",
            "            <h2 className=\"text-2xl font-bold\">{t(\"${1}s\")}</h2>",
            "          </div>",
            "          <div className=\"flex gap-2\">",
            "            <TypeSearch",
            "              className=\"w-48\"",
            "              label={t(\"search\")}",
            "              value={searchTerm}",
            "              variant=\"underlined\"",
            "              onChange={(value) => setSearchTerm(value)}",
            "            />",
            "            <TypeButton",
            "              action=\"success\"",
            "              disabled={!ScreenAccess.value.create}",
            "              label={t(\"add\")}",
            "              name=\"Plus\"",
            "              onPress={onAdd}",
            "            />",
            "          </div>",
            "        </aside>",
            "      </ArticleLayout>",
            "      <GridLayout>",
            "        <AgGridReact",
            "          ref={gridRef}",
            "          columnDefs={columnDefs(t, handleAction)}",
            "          datasource={dataSource}",
            "          gridOptions={gridOptions}",
            "          theme={ThemeMode.value === \"dark\" ? darkGridTheme : lightGridTheme}",
            "        />",
            "      </GridLayout>",
            "      <FloatLayout>",
            "        <TypeButton",
            "          action=\"primary\"",
            "          label=\"\"",
            "          name=\"RotateCcw\"",
            "          onPress={handleReload}",
            "        />",
            "      </FloatLayout>",
            "    </>",
            "  );",
            "}",
            ""
        ],
        "description": "List page with AG Grid, Search, and Add for signal-based entity"
    },
    "Entity Page with Drawer": {
        "prefix": "dxpageinit",
        "body": [
            "import { Drawer, DrawerContent, DrawerBody } from \"@heroui/react\";",
            "import { useSignals } from \"@preact/signals-react/runtime\";",
            "",
            "import { ${1/(.*)/${1:/capitalize}/}List } from \"./${1}.list\";",
            "import {",
            "  ${1}IsPopupOpen,",
            "  ${1}IsEditMode,",
            "  editModeUpdate,",
            "} from \"./common/service\";",
            "import ${1/(.*)/${1:/capitalize}/}View from \"./${1}.view\";",
            "import ${1/(.*)/${1:/capitalize}/}Form from \"./${1}.form\";",
            "",
            "export function ${1/(.*)/${1:/capitalize}/}Page() {",
            "  useSignals();",
            "",
            "  return (",
            "    <>",
            "      <${1/(.*)/${1:/capitalize}/}List />",
            "      <Drawer",
            "        hideCloseButton",
            "        isOpen={${1}IsPopupOpen.value}",
            "        size=\"4xl\"",
            "        onClose={() => editModeUpdate(undefined)}",
            "      >",
            "        <DrawerContent>",
            "          <DrawerBody className=\"w-full\">",
            "            {${1}IsEditMode.value ? <${1/(.*)/${1:/capitalize}/}Form /> : <${1/(.*)/${1:/capitalize}/}View />}",
            "          </DrawerBody>",
            "        </DrawerContent>",
            "      </Drawer>",
            "    </>",
            "  );",
            "}",
            ""
        ],
        "description": "Page component with list + drawer switching between Form and View"
    },
    "Entity Page Entry (Suspense + Permissions)": {
        "prefix": "dxappinit",
        "body": [
            "import { Suspense } from \"react\";",
            "",
            "import { ArticleLayout } from \"@/layouts/article-layout\";",
            "import { ContentLayout } from \"@/layouts/content-layout\";",
            "import { FloatLayout } from \"@/layouts/float-layout\";",
            "import { SkeletonFloat } from \"@/skeleton/skeleton-float\";",
            "import { SkeletonArticle } from \"@/skeleton/skeleton-article\";",
            "import { ${1/(.*)/${1:/capitalize}/}Page } from \"@/modules/${1}/${1}.page\";",
            "import { SkeletonTable } from \"@/skeleton/skeleton-table\";",
            "import { ScreenAccess } from \"@/utils/services/app.event\";",
            "import PermissionDenied from \"@/components/permission-denied\";",
            "",
            "export default function ${1/(.*)/${1:/capitalize}/}() {",
            "  return (",
            "    <Suspense fallback={<SkeletonPage />}>",
            "      {ScreenAccess.value.read ? <${1/(.*)/${1:/capitalize}/}Page /> : <PermissionDenied />}",
            "    </Suspense>",
            "  );",
            "}",
            "",
            "function SkeletonPage() {",
            "  return (",
            "    <>",
            "      <ArticleLayout>",
            "        <SkeletonArticle />",
            "      </ArticleLayout>",
            "      <ContentLayout>",
            "        <SkeletonTable />",
            "      </ContentLayout>",
            "      <FloatLayout>",
            "        <SkeletonFloat />",
            "      </FloatLayout>",
            "    </>",
            "  );",
            "}",
            ""
        ],
        "description": "Suspense-based page entry with permission check and fallback skeletons"
    }
}