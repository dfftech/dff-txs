{
    "PrintConsole": {
        "prefix": "dxlog",
        "body": [ "console.log('$1 => ', $1);" ],
        "description": "console log"
    },
    "Markdown Props useMemo": {
        "prefix": "dxtlm",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: testRule.${1}",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for TypeMarkdown/Field component props"
    },
    "Search Props useMemo": {
        "prefix": "dxtsh",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    disabled: false,",
            "    label: t(\"${1}\"),",
            "    name: \"${2}\",",
            "    value: \"\",",
            "    onChange: (value: string) => {",
            "      setSearchTerm(value);",
            "    },",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for searchProps with onChange handler"
    },
    "Generic Input Props useMemo": {
        "prefix": "dxtfip",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: testRule.${1}",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for Input props"
    },
    "OTP Props useMemo": {
        "prefix": "dxtotp",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: testRule.${1},",
            "    length: 6",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for OTP field props"
    },
    "Submit Props useMemo": {
        "prefix": "dxtsm",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    isLoading: isSubmitLoading.value,",
            "    label: t(\"submit\"),",
            "    name: \"SendHorizontal\" as const,",
            "    onPress: handleSubmit(onSubmitTest),",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for submit button props"
    },

    "Cancel Props useMemo": {
        "prefix": "dxtcl",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    isLoading: isSubmitLoading.value,",
            "    label: t(\"cancel\"),",
            "    name: \"CircleX\" as const,",
            "    onPress: onCancel,",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for cancel button props"
    },

    "Event Date Props useMemo": {
        "prefix": "dxted",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    error: errors[\"${1}\"],",
            "    isDateTimeEnabled: true,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: testRule.${1}",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for event date field"
    },
    "Terms Accepted Props useMemo": {
        "prefix": "dxtta",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\"",
            "  }),",
            "  [t],",
            ");"
        ],
        "description": "useMemo hook for simple checkbox field"
    },
    "List Country Props useMemo": {
        "prefix": "dxtlc",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    options: countryOptions.value,",
            "    rules: testRule.${1},",
            "    disabled: false,",
            "    selectionMode: \"multiple\" as const",
            "  }),",
            "  [t, countryOptions.value],",
            ");"
        ],
        "description": "useMemo hook for multi-select country list"
    },
    "Lang Props useMemo": {
        "prefix": "dxtlg",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: { required: true },",
            "    type: \"text\" as const",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for language field"
    },
    "Country Props useMemo": {
        "prefix": "dxtcuy",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    multiSelect: false,",
            "    name: \"${1}\",",
            "    options: countryOptions.value,",
            "    rules: testRule.${1}",
            "  }),",
            "  [t, errors.${1}, countryOptions.value],",
            ");"
        ],
        "description": "useMemo hook for country select"
    },
    "Time Props useMemo": {
        "prefix": "dxttm",
        "body": [
            "const ${1}Props = useMemo(",
            "  () => ({",
            "    control: control,",
            "    disabled: false,",
            "    error: errors.${1},",
            "    label: t(\"${1}\"),",
            "    name: \"${1}\",",
            "    rules: testRule.${1},",
            "    type: 12 as const",
            "  }),",
            "  [t, errors.${1}],",
            ");"
        ],
        "description": "useMemo hook for time field"
    }

}

